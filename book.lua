--[[
ex. 3.1.
Что напечатает следующая программа?
for i = -10, 10 do
    print(i, i % 3)
end

Ответ: программа напечатет остаток от деления числа от -10 до 10

]]
   --



--[[
ex. 3.2.
Что является результатом выражения 2^3^4? А что
насчет 2^-3^4?

Ответ: В первром случае будет 2.4178516392293e+24, а во втором 4.1359030627651e-25

]]
   --



--[[
ex. 3.3.
Мы можем представить многочлен anxn + an−1xn−1 +... + a1x1 + a0 в Lua как список его коэффициентов {a0, a1, ..., an}.
Напишите функцию, которая получает многочлен (представленный в виде таблицы) и значение x, а затем возвращает значение многочлена.






--[[
ex. 3.4.
Можете ли вы написать функцию из предыдущего
упражнения так, чтобы использовать

]]--




--[[
ex. 3.5.
Как вы можете проверить, что значение является
булевым, не прибегая к функции type?

Ответ:

]]
   --

--[[
ex. 3.6.
Рассмотрим следующее выражение:
(x and y and (not z)) or ((not y) and x)
Нужны ли в этом выражении круглые скобки? Как бы вы посоветовали использовать их в данном выражении?

Ответ: (x and y and (not z)) or ((not y) and x)
по таблице приоритетов операций not выше чем end и or
]]
   --


--[[
ex. 3.7.
Что напечатает следующий скрипт? Объясните.
sunday = "monday"; monday = "sunday"
t = {sunday = "monday", [sunday] = monday}
print(t.sunday, t[sunday], t[t.sunday])

Ответ: monday  sunday  sunday
Первый ответ - вызов по ключу sunday, второй ответ вызов таблицы sunday

]]
   --



--[[
ex. 3.8.
Предположим, вы хотите создать таблицу, которая связывает каждую экранированную последовательность для строк (см.
раздел 2.4) с ее значением. Как бы вы написали конструктор для такой таблицы?

Ответ: a = {x = "0", b = "2", v = "3"}

]]
   --


--[[
ex. 4.1.
Большинство языков с С-образным синтаксисом не предлагает конструкцию elseif.
Почему эта конструкция больше нужна в Lua, чем в тех языках?

Ответ:

]]
   --


--[[
ex. 4.2. Опишите четыре различных способа написать
безусловный цикл в Lua. Какой способ предпочитаете вы?

Ответ:
1.
if a == b then
    r = a + b
elseif a == d then
    r = a + d

end

2.
local i = 1
while a[i] do
    print(a[i])
    i = i + 1
end



3.
repeat
    line = io.read()
until line ~= ""
print(line)


3.
for i = 1, f(x) do print(i) end

Предпочтение зависит от задачи

]]
   --



--[[
ex. 4.3. Многие считают, что repeat—until используется
редко и потому не должен присутствовать в минималистических языках
вроде Lua. Чты вы думаете об этом?


--]]



--[[

ex. 4.4. Перепишите конечный автомат из листинга 4.2 без
использования goto.

--]]


goto room1 -- начальная комната
::room1::
do
    local move = io.read()
    if move == "south" then
        goto room3
    elseif move == "east" then
        goto room2
    else
        print("invalid move")
        goto room1 -- остаемся в этой же комнате
    end
end
::room2::
do
    local move = io.read()
    if move == "south" then
        goto room4
    elseif move == "west" then
        goto room1
    else
        print("invalid move")
        goto room2
    end
end
::room3::
do
    local move = io.read()
    if move == "north" then
        goto room1
    elseif move == "east" then
        goto room4
    else
        print("invalid move")
        goto room3
    end
end
::room4::
do
    print("Congratulations, you won!")
end
